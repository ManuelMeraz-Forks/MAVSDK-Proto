syntax = "proto3";

package mavsdk.rpc.info_server;

import "mavsdk_options.proto";

option java_package = "io.mavsdk.info_server";
option java_outer_classname = "ComponentInformationServerProto";

// Provide information about the hardware and/or software of a system.
service InfoServerService {
    // Provide autopilot version of the system.
    rpc ProvideAutopilotVersion(ProvideAutopilotVersionRequest) returns(ProvideAutopilotVersionResponse) { option (mavsdk.options.async_type) = SYNC; }
    // Provide protocol version of the system.
    rpc ProvideProtocolVersion(ProvideProtocolVersionRequest) returns(ProvideProtocolVersionResponse) { option (mavsdk.options.async_type) = SYNC; }
}

message ProvideProtocolVersionRequest {}
message ProvideProtocolVersionResponse {
    InfoResult info_result = 1;
    ProtocolVersion protocol_version_info = 2; // Protocol version of the system
}

message ProvideAutopilotVersionRequest {}
message ProvideAutopilotVersionResponse {
    InfoResult info_result = 1;
    AutopilotVersion protocol_version_info = 2; // Protocol version of the system
}

// Mavlink version information.
message ProtocolVersion {
	int32 version = 1; // Currently active MAVLink version number * 100: v1.0 is 100, v2.0 is 200, etc.
	int32 min_version = 2; // Minimum MAVLink version supported
	int32 max_version = 3; // Maximum MAVLink version supported (set to the same value as version by default)
	string spec_version_hash = 4; // The first 8 bytes (not characters printed in hex!) of the git hash.
	string library_version_hash = 5; // The first 8 bytes (not characters printed in hex!) of the git hash.
}

// Autopilot version information.
message AutopilotVersion {
    int32 flight_sw_major = 1; // Flight software major version
    int32 flight_sw_minor = 2; // Flight software minor version
    int32 flight_sw_patch = 3; // Flight software patch version
    int32 flight_sw_vendor_major = 4; // Flight software vendor major version
    int32 flight_sw_vendor_minor = 5; // Flight software vendor minor version
    int32 flight_sw_vendor_patch = 6; // Flight software vendor patch version
    int32 os_sw_major = 7; // Operating system software major version
    int32 os_sw_minor = 8; // Operating system software minor version
    int32 os_sw_patch = 9; // Operating system software patch version
    string flight_sw_git_hash = 10; // Flight software git hash
    string os_sw_git_hash = 11; // Operating system software git hash
}

// Result type.
message InfoResult {
    // Possible results returned for info requests.
    enum Result {
        RESULT_UNKNOWN = 0; // Unknown result
        RESULT_SUCCESS = 1; // Request succeeded
        RESULT_INFORMATION_NOT_RECEIVED_YET = 2; // Information has not been received yet
        RESULT_NO_SYSTEM = 3; // No system is connected
    }

    Result result = 1; // Result enum value
    string result_str = 2; // Human-readable English string describing the result
}
