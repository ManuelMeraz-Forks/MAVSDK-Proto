syntax = "proto3";

package mavsdk.rpc.info_server;

import "mavsdk_options.proto";

option java_package = "io.mavsdk.info_server";
option java_outer_classname = "ComponentInformationServerProto";

// Provide information about the hardware and/or software of a system.
service InfoServerService {
    // Provide autopilot version of the system.
    rpc ProvideAutopilotVersion(ProvideAutopilotVersionRequest) returns(ProvideAutopilotVersionResponse) { option (mavsdk.options.async_type) = SYNC; }
    // Provide protocol version of the system.
    rpc ProvideProtocolVersion(ProvideProtocolVersionRequest) returns(ProvideProtocolVersionResponse) { option (mavsdk.options.async_type) = SYNC; }
    // Set autopilot version of the system.
    rpc SetAutopilotVersion(SetAutopilotVersionRequest) returns(SetAutopilotVersionResponse) { option (mavsdk.options.async_type) = SYNC; }
    // Set protocol version of the system.
    rpc SetProtocolVersion(SetProtocolVersionRequest) returns(SetProtocolVersionResponse) { option (mavsdk.options.async_type) = SYNC; }
}

message ProvideProtocolVersionRequest {}
message ProvideProtocolVersionResponse {
    InfoResult info_result = 1;
    ProtocolVersion protocol_version_info = 2; // Protocol version of the system
}

message ProvideAutopilotVersionRequest {}
message ProvideAutopilotVersionResponse {
    InfoResult info_result = 1;
    AutopilotVersion protocol_version_info = 2; // Autopilot version of the system
}

message SetAutopilotVersionRequest {
    AutopilotVersion autopilot_version_info = 1; // Autopilot version of the system
}

message SetAutopilotVersionResponse {
    InfoResult info_result = 1;
}

message SetProtocolVersionRequest {
    ProtocolVersion protocol_version_info = 1; // Protocol version of the system
}

message SetProtocolVersionResponse {
    InfoResult info_result = 1;
}


// Mavlink version information.
message ProtocolVersion {
	uint32 version = 1; // Currently active MAVLink version number * 100: v1.0 is 100, v2.0 is 200, etc.
	uint32 min_version = 2; // Minimum MAVLink version supported
	uint32 max_version = 3; // Maximum MAVLink version supported (set to the same value as version by default)
	string spec_version_hash = 4; // The first 8 bytes (not characters printed in hex!) of the git hash.
	string library_version_hash = 5; // The first 8 bytes (not characters printed in hex!) of the git hash.
}

// Autopilot version information.
message AutopilotVersion {
    uint64 capabilities = 1; // MAV_PROTOCOL_CAPABILITYBitmap of capabilities
	uint32 flight_sw_version = 2; // Firmware version number
	uint32 middleware_sw_version = 3; // Middleware version number
	uint32 os_sw_version = 4; // Operating system version number
	uint32 board_version = 5; // HW / board version (last 8 bits should be silicon ID, if any). The first 16 bits of this field specify https://github.com/PX4/PX4-Bootloader/blob/master/board_types.txt
	string flight_custom_version = 6; // Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.
	string middleware_custom_version = 7; // Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.
	string os_custom_version = 8; // Custom version field, commonly the first 8 bytes of the git hash. This is not an unique identifier, but should allow to identify the commit using the main version number even for very large code bases.
	uint32 vendor_id = 9; // ID of the board vendor
	uint32 product_id = 10; // ID of the product
	uint64 uid = 11; // UID if provided by hardware (see uid2)
	string uid2 = 12; // UID if provided by hardware (supersedes the uid field. If this is non-zero, use this field, otherwise use uid)	
}

// Result type.
message InfoResult {
    // Possible results returned for info requests.
    enum Result {
        RESULT_UNKNOWN = 0; // Unknown result
        RESULT_SUCCESS = 1; // Request succeeded
        RESULT_INFORMATION_NOT_RECEIVED_YET = 2; // Information has not been received yet
        RESULT_NO_SYSTEM = 3; // No system is connected
    }

    Result result = 1; // Result enum value
    string result_str = 2; // Human-readable English string describing the result
}
